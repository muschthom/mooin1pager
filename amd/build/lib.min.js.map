{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'], function ($, Ajax, Notification) {\r\n    function updateProgressBar(courseId) {\r\n        setTimeout(() => {\r\n            Ajax.call([{\r\n                methodname: 'format_mooin1pager_execute',\r\n                args: { courseid: courseId }\r\n            }])[0]\r\n                .then(result => {\r\n                    console.log(\"AJAX Call Result:\", result);\r\n                    const curr = result.courseprogress;\r\n\r\n                    const container = document.querySelector('.progress-container');\r\n                    if (container) {\r\n                        const innerBar = container.querySelector('.progressbar-inner');\r\n                        const percentSpan = container.querySelector('.font-weight-bold');\r\n\r\n                        if (innerBar) {\r\n                            innerBar.style.width = `${curr}%`;\r\n                        }\r\n                        if (percentSpan) {\r\n                            percentSpan.textContent = `${curr}%`;\r\n                        }\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    Notification.exception(error);\r\n                });\r\n        }, 500); \r\n    }\r\n\r\n    \r\n    function hvpListener() {\r\n        //console.log(\"HVP Listener started\");\r\n        const parentIFrames = document.querySelectorAll('iframe');\r\n        parentIFrames.forEach(parentIFrame => {\r\n            try {\r\n                const doc = parentIFrame.contentDocument || parentIFrame.contentWindow.document;\r\n                let nestedIFrame = null;\r\n\r\n                //adjust height of nested H5P iframe\r\n                const adjust = () => setTimeout(() => {\r\n                    nestedIFrame = nestedIFrame || doc.querySelector('.h5p-iframe');\r\n                    if (nestedIFrame?.contentWindow?.document) {\r\n                        const h = nestedIFrame.contentWindow.document.body.scrollHeight;\r\n                        if (h > 1) parentIFrame.style.height = `${h}px`;\r\n                    }\r\n                }, 100);\r\n\r\n                //check if H5P is loaded in the nested iframe\r\n                const checkH5P = () => {\r\n                    nestedIFrame = nestedIFrame || doc.querySelector('.h5p-iframe');\r\n                    if (nestedIFrame) {\r\n                        const pw = nestedIFrame.contentWindow;\r\n                        if (pw.H5P?.externalDispatcher) {\r\n                            console.log(\"H5P gefunden\");\r\n                            // Listen for xAPI events from H5P\r\n                            pw.H5P.externalDispatcher.on('xAPI', event => {\r\n                                const courseId = M.cfg.courseId || document.body.dataset.courseid;\r\n                                //update progress bar on xAPI event\r\n                                updateProgressBar(courseId);\r\n                            });\r\n                            adjust();\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                if (!checkH5P()) {\r\n                    const mo = new MutationObserver(() => {\r\n                        if (checkH5P()) mo.disconnect();\r\n                    });\r\n                    mo.observe(doc.body, { childList: true, subtree: true });\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Fehler in HVP Listener:\", err);\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        updateProgressBar: updateProgressBar,\r\n        hvpListener: hvpListener\r\n    };\r\n});"],"names":["define","$","Ajax","Notification","updateProgressBar","courseId","setTimeout","call","methodname","args","courseid","then","result","console","log","curr","courseprogress","container","document","querySelector","innerBar","percentSpan","style","width","textContent","catch","error","exception","hvpListener","querySelectorAll","forEach","parentIFrame","doc","contentDocument","contentWindow","nestedIFrame","adjust","_nestedIFrame","_nestedIFrame$content","h","body","scrollHeight","height","checkH5P","pw","H5P","_pw$H5P","externalDispatcher","on","event","M","cfg","dataset","mo","MutationObserver","disconnect","observe","childList","subtree","err"],"mappings":"AAAAA,gCAAO,CAAC,SAAU,YAAa,sBAAsB,SAAUC,EAAGC,KAAMC,uBAC3DC,kBAAkBC,UACvBC,YAAW,KACPJ,KAAKK,KAAK,CAAC,CACPC,WAAY,6BACZC,KAAM,CAAEC,SAAUL,aAClB,GACCM,MAAKC,SACFC,QAAQC,IAAI,oBAAqBF,cAC3BG,KAAOH,OAAOI,eAEdC,UAAYC,SAASC,cAAc,0BACrCF,UAAW,OACLG,SAAWH,UAAUE,cAAc,sBACnCE,YAAcJ,UAAUE,cAAc,qBAExCC,WACAA,SAASE,MAAMC,gBAAWR,WAE1BM,cACAA,YAAYG,sBAAiBT,eAIxCU,OAAMC,QACHvB,aAAawB,UAAUD,YAEhC,WAqDA,CACHtB,kBAAmBA,kBACnBwB,uBAjDsBV,SAASW,iBAAiB,UAClCC,SAAQC,yBAERC,IAAMD,aAAaE,iBAAmBF,aAAaG,cAAchB,aACnEiB,aAAe,WAGbC,OAAS,IAAM9B,YAAW,gDAC5B6B,aAAeA,cAAgBH,IAAIb,cAAc,qCAC7CgB,qEAAAE,cAAcH,gDAAdI,sBAA6BpB,SAAU,OACjCqB,EAAIJ,aAAaD,cAAchB,SAASsB,KAAKC,aAC/CF,EAAI,IAAGR,aAAaT,MAAMoB,iBAAYH,YAE/C,KAGGI,SAAW,QACbR,aAAeA,cAAgBH,IAAIb,cAAc,eAC7CgB,aAAc,mBACRS,GAAKT,aAAaD,iCACpBU,GAAGC,wBAAHC,QAAQC,0BACRlC,QAAQC,IAAI,gBAEZ8B,GAAGC,IAAIE,mBAAmBC,GAAG,QAAQC,QAGjC7C,kBAFiB8C,EAAEC,IAAI9C,UAAYa,SAASsB,KAAKY,QAAQ1C,aAI7D0B,UACO,SAGR,OAGNO,WAAY,OACPU,GAAK,IAAIC,kBAAiB,KACxBX,YAAYU,GAAGE,gBAEvBF,GAAGG,QAAQxB,IAAIQ,KAAM,CAAEiB,WAAW,EAAMC,SAAS,KAEvD,MAAOC,KACL9C,QAAQa,MAAM,0BAA2BiC"}