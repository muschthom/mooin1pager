{"version":3,"file":"ildhvp4.min.js","sources":["../src/ildhvp4.js"],"sourcesContent":["// Import der Abhängigkeiten\r\nimport $ from 'jquery';\r\nimport Ajax from 'core/ajax';\r\nimport notification from 'core/notification';\r\nimport Str from 'core/str';\r\nimport Url from 'core/url';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport lib from 'format_mooin1pager/lib';\r\nimport Update from 'format_mooin1pager/udateprogressbar';\r\nimport { getCurrentCourseEditor } from 'core_courseformat/courseeditor';\r\n\r\n// ILD Namespace Definition\r\nconst ILD = {};\r\n\r\n// Interactions counter\r\nILD.interactions = [];\r\n\r\n// SingleChoiceInteractions counter\r\nILD.singleChoiceInteractions = [];\r\n\r\n// SubContentIds - avoid duplicated answered statement\r\nILD.subIds = [];\r\n\r\n// Stores QuestionSet PassPercentage\r\nILD.questionSetPassPercentage = [];\r\n\r\n// Stores Essay PassPercentage\r\nILD.EssayPassPercentage = [];\r\n\r\n// Stores Branching scenario info\r\nILD.BranchingScenario = [];\r\n\r\n// Stores maxScore of interactions\r\nILD.maxScore = 0;\r\n\r\n// Stores score of interactions\r\nILD.score = 0;\r\n\r\n// Stores percentage of interactions progress\r\nILD.percentage = 0;\r\n\r\n// Internal H5P function listening for xAPI answered events and stores scores\r\nILD.xAPIAnsweredListener = (event) => {\r\n  const contentId = event.getVerifiedStatementValue([\r\n    'object',\r\n    'definition',\r\n    'extensions',\r\n    'http://h5p.org/x-api/h5p-local-content-id',\r\n  ]);\r\n  let isInteraction = false;\r\n\r\n  if (event.data.statement.object.objectType === 'Activity') {\r\n    isInteraction = true;\r\n  }\r\n\r\n  if (\r\n    isInteraction &&\r\n    event.getVerb() === 'answered' &&\r\n    typeof ILD.questionSetPassPercentage[contentId] === 'undefined' &&\r\n    typeof ILD.singleChoiceInteractions[contentId] === 'undefined' &&\r\n    typeof ILD.EssayPassPercentage[contentId] === 'undefined' &&\r\n    typeof ILD.BranchingScenario[contentId] === 'undefined'\r\n  ) {\r\n    const score = event.getScore();\r\n    const maxScore = event.getMaxScore();\r\n    let subContentId = event.data.statement.object.id.split('subContentId=')[1];\r\n\r\n    if (ILD.subIds.indexOf(subContentId) !== -1) {\r\n      if (typeof ILD.interactions[contentId] === 'undefined') {\r\n        ILD.interactions[contentId] = 1;\r\n      }\r\n\r\n      const interactions = ILD.interactions[contentId];\r\n      ILD.percentage += (score / maxScore / interactions) * 100;\r\n      ILD.setResult(contentId, ILD.percentage, 100);\r\n    } else if (ILD.subIds.indexOf(subContentId) === -1 && ILD.subIds.length === 0) {\r\n      const percentage = (score / maxScore) * 100;\r\n      ILD.setResult(contentId, percentage, 100);\r\n    }\r\n  }\r\n\r\n  // Handle QuestionSet completion\r\n  if (typeof ILD.questionSetPassPercentage[contentId] !== 'undefined' && event.getVerb() === 'completed') {\r\n    const score = event.getScore();\r\n    const maxScore = event.getMaxScore();\r\n    const percentage = (score / maxScore) * 100;\r\n    const passPercentage = ILD.questionSetPassPercentage[contentId];\r\n\r\n    if (percentage >= passPercentage) {\r\n      ILD.setResult(contentId, 100, 100);\r\n    } else {\r\n      ILD.setResult(contentId, percentage, 100);\r\n    }\r\n  }\r\n\r\n  // Handle Essay score\r\n  if (typeof ILD.EssayPassPercentage[contentId] !== 'undefined' && event.getVerb() === 'scored') {\r\n    const score = event.getScore();\r\n    const maxScore = event.getMaxScore();\r\n    const percentage = (score / maxScore) * 100;\r\n    ILD.setResult(contentId, percentage, 100);\r\n  }\r\n\r\n  // Handle SingleChoiceSet completion\r\n  if (typeof ILD.singleChoiceInteractions[contentId] !== 'undefined' && event.getVerb() === 'completed') {\r\n    const score = event.getScore();\r\n    const maxScore = event.getMaxScore();\r\n    const percentage = (score / maxScore) * 100;\r\n    ILD.setResult(contentId, percentage, 100);\r\n  }\r\n\r\n  // Handle BranchingScenario completion\r\n  if (typeof ILD.BranchingScenario[contentId] !== 'undefined' && event.getVerb() === 'completed') {\r\n    ILD.setResult(contentId, 100, 100);\r\n  }\r\n};\r\n\r\n// Post answered results for user and set progress\r\nILD.setResult = (contentId, score, maxScore) => {\r\n  console.log(\"get score: \", score);\r\n\r\n  const courseId = M.cfg.courseId || document.body.dataset.courseid;\r\n\r\n  Ajax.call([{\r\n    methodname: 'format_mooin1pager_setgrade',\r\n    args: { contentid: contentId, score, maxscore: maxScore }\r\n  }])[0]\r\n    .then(result => {\r\n      console.log(\"AJAX setgrade result:\", result);\r\n\r\n      if (courseId) {\r\n        Update.updateProgressBar(courseId);\r\n      }\r\n      \r\n      // Trigger completion update for course index if H5P activity is completed\r\n      if (score >= maxScore && result.cmid) {\r\n        //console.log(`Attempting to trigger completion for H5P cmid: ${result.cmid}`);\r\n        \r\n        // Get reactive instance from the course editor\r\n        try {\r\n          const reactive = getCurrentCourseEditor();\r\n          if (reactive) {\r\n            //console.log(`Successfully got reactive instance, triggering completion for cmid: ${result.cmid}`);\r\n            reactive.dispatch('cmCompletion', [result.cmid], true);\r\n          } else {\r\n            console.log(\"Could not get reactive instance from course editor\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error getting reactive instance:\", error);\r\n        }\r\n      }\r\n\r\n    })\r\n    .catch(error => {\r\n      console.error(\"setgrade AJAX error:\", error);\r\n      notification.exception(error);\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n// Check if library is InteractiveVideo or QuestionSet\r\nILD.checkLibrary = (H5PIntegration, H5PInstance) => {\r\n\r\n  //window.console.log(H5PInstance);\r\n  const contentId = H5PInstance.contentId;\r\n\r\n  //fix\r\n  //progress trigger for hvp videos without interactions or without answerable interactions when video ends\r\n  if (H5PInstance && H5PInstance.video && typeof H5PInstance.video.on === 'function') {\r\n\r\n    // Check if there are no answerable interactions in video\r\n    function noAnswerableInteractions(H5PInstance) {\r\n      return H5PInstance.interactions.every(interaction => !interaction.isAnswerable());\r\n    }\r\n\r\n    //console.log(`H5P Interactive Video instance (${contentId}) detected. Attaching video listener.`);\r\n    if (H5PInstance.interactions\r\n      && Array.isArray(H5PInstance.interactions)\r\n      && H5PInstance.interactions.length === 0\r\n      || noAnswerableInteractions(H5PInstance)) {\r\n\r\n      H5PInstance.video.on('stateChange', function (event) {\r\n        //console.log(`Video stateChange event for contentId ${contentId}:`, event.data);\r\n        // stateChange data === 0 bedeutet Video beendet\r\n        if (event.data === 0) {\r\n          console.log(`✅ Video with contentId ${contentId} finished.`);\r\n          ILD.setResult(contentId, 100, 100);\r\n        }\r\n      });\r\n\r\n\r\n    }\r\n  }\r\n\r\n  if (typeof contentId !== 'undefined') {\r\n    const contentData = H5PIntegration.contents[`cid-${contentId}`];\r\n    const content = JSON.parse(contentData.jsonContent);\r\n    const library = contentData.library;\r\n\r\n\r\n    if (library.includes('H5P.InteractiveVideo')) {\r\n      ILD.getVideoInteractions(contentId, content);\r\n    } else if (library.includes('H5P.QuestionSet')) {\r\n      ILD.getQuestionSetPercentage(contentId, content);\r\n    } else if (library.includes('H5P.SingleChoiceSet')) {\r\n      ILD.getSingleChoiceInteractions(contentId, content);\r\n    } else if (library.includes('H5P.Essay')) {\r\n      ILD.getEssayPercentage(contentId, content);\r\n    } else if (library.includes('H5P.BranchingScenario')) {\r\n      ILD.BranchingScenario[contentId] = 1;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// Count interactions layers from interactive video element\r\nILD.getVideoInteractions = (contentId, content) => {\r\n  const interactions = content.interactiveVideo.assets.interactions;\r\n  const summaries = content.interactiveVideo.summary.task.params.summaries;\r\n  const notAllowedInteractions = ['H5P.Text', 'H5P.Table', 'H5P.Link', 'H5P.Image', 'H5P.GoToQuestion', 'H5P.Nil', 'H5P.IVHotspot'];\r\n\r\n  let interactionsCounter = 0;\r\n\r\n  if (typeof interactions === 'object') {\r\n    $.each(interactions, (i) => {\r\n      const library = interactions[i].action.library;\r\n      const subid = interactions[i].action.subContentId;\r\n\r\n      if (!notAllowedInteractions.some((item) => library.includes(item))) {\r\n        interactionsCounter++;\r\n        ILD.subIds.push(subid);\r\n      }\r\n    });\r\n\r\n    ILD.interactions[contentId] = interactionsCounter;\r\n  }\r\n\r\n\r\n\r\n  /*\r\n  if (!interactions || (typeof interactions === 'object' && interactionsCounter === 0)) {\r\n    $('.h5p-iframe')[0].contentWindow.onload = () => {\r\n      $('.h5p-iframe')[0].contentWindow.H5P.instances[0].video.on('stateChange', (event) => {\r\n        if (event.data === 0) {\r\n          ILD.setResult(contentId, 100, 100);\r\n        }\r\n      });\r\n    };\r\n  }\r\n    */\r\n\r\n  if (summaries.length) {\r\n    let summary = false;\r\n\r\n    $.each(summaries, (s) => {\r\n      if (typeof summaries[s].summary !== 'undefined') {\r\n        const subId = content.interactiveVideo.summary.task.subContentId;\r\n        ILD.subIds.push(subId);\r\n        summary = true;\r\n      }\r\n    });\r\n\r\n    if (summary) {\r\n      ILD.interactions[contentId] = interactionsCounter + 1;\r\n    }\r\n  }\r\n};\r\n\r\n// Count interactions layers from SingleChoice element\r\nILD.getSingleChoiceInteractions = (contentId, content) => {\r\n  const interactions = content.choices;\r\n\r\n  $.each(interactions, (s) => {\r\n    const subid = interactions[s].subContentId;\r\n    ILD.subIds.push(subid);\r\n  });\r\n\r\n  ILD.singleChoiceInteractions[contentId] = interactions.length;\r\n};\r\n\r\n// Get QuestionSet PassPercentage\r\nILD.getQuestionSetPercentage = (contentId, content) => {\r\n  ILD.questionSetPassPercentage[contentId] = content.passPercentage;\r\n};\r\n\r\n// Get Essay PassPercentage\r\nILD.getEssayPercentage = (contentId, content) => {\r\n  ILD.EssayPassPercentage[contentId] = content.behaviour.percentagePassing;\r\n};\r\n\r\n\r\n\r\n\r\nexport default {\r\n  init(H5PInstance, H5PIntegration, sectionId, reactive) {\r\n    ILD.sectionId = sectionId;\r\n    ILD.reactive = reactive;\r\n    ILD.checkLibrary(H5PIntegration, H5PInstance.instances[0]);\r\n    H5PInstance.externalDispatcher.on('xAPI', ILD.xAPIAnsweredListener);\r\n  },\r\n};\r\n"],"names":["ILD","event","contentId","getVerifiedStatementValue","isInteraction","data","statement","object","objectType","getVerb","questionSetPassPercentage","singleChoiceInteractions","EssayPassPercentage","BranchingScenario","score","getScore","maxScore","getMaxScore","subContentId","id","split","subIds","indexOf","interactions","percentage","setResult","length","console","log","courseId","M","cfg","document","body","dataset","courseid","call","methodname","args","contentid","maxscore","then","result","updateProgressBar","cmid","reactive","dispatch","error","catch","exception","H5PIntegration","H5PInstance","video","on","noAnswerableInteractions","every","interaction","isAnswerable","Array","isArray","contentData","contents","content","JSON","parse","jsonContent","library","includes","getVideoInteractions","getQuestionSetPercentage","getSingleChoiceInteractions","getEssayPercentage","interactiveVideo","assets","summaries","summary","task","params","notAllowedInteractions","interactionsCounter","each","i","action","subid","some","item","push","s","subId","choices","passPercentage","behaviour","percentagePassing","init","sectionId","checkLibrary","instances","externalDispatcher","xAPIAnsweredListener"],"mappings":"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"}