{"version":3,"file":"cm.min.js","sources":["../../../src/local/courseindex/cm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index cm component.\r\n *\r\n * This component is used to control specific course modules interactions like drag and drop.\r\n *\r\n * @module     core_courseformat/local/courseindex/cm\r\n * @class      core_courseformat/local/courseindex/cm\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\r\nimport Templates from 'core/templates';\r\nimport Prefetch from 'core/prefetch';\r\nimport Config from 'core/config';\r\n\r\n// Prefetch the completion icons template.\r\nconst completionTemplate = 'format_mooin1pager/local/courseindex/cmcompletion';\r\nPrefetch.prefetchTemplate(completionTemplate);\r\n\r\nexport default class Component extends DndCmItem {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'courseindex_cm';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            CM_NAME: `[data-for='cm_name']`,\r\n            CM_COMPLETION: `[data-for='cm_completion']`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            CMHIDDEN: 'dimmed',\r\n            LOCKED: 'editinprogress',\r\n            RESTRICTIONS: 'restrictions',\r\n            PAGEITEM: 'pageitem',\r\n            INDENTED: 'indented',\r\n        };\r\n        // We need our id to watch specific events.\r\n        this.id = this.element.dataset.id;\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustache template.\r\n     *\r\n     * @param {element|string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors) {\r\n        return new Component({\r\n            element: document.getElementById(target),\r\n            selectors,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the course state.\r\n     */\r\n    stateReady(state) {\r\n        this.configDragDrop(this.id);\r\n        const cm = state.cm.get(this.id);\r\n        const course = state.course;\r\n        // Refresh completion icon.\r\n        this._refreshCompletion({\r\n            state,\r\n            element: cm,\r\n        });\r\n        const url = new URL(window.location.href);\r\n        const anchor = url.hash.replace('#', '');\r\n        // Check if the current url is the cm url.\r\n        if (window.location.href == cm.url\r\n            || (window.location.href.includes(course.baseurl) && anchor == cm.anchor)\r\n        ) {\r\n            this.reactive.dispatch('setPageItem', 'cm', this.id);\r\n            this.element.scrollIntoView({block: \"center\"});\r\n        }\r\n        // Check if this we are displaying this activity page.\r\n        if (Config.contextid != Config.courseContextId && Config.contextInstanceId == this.id) {\r\n            this.reactive.dispatch('setPageItem', 'cm', this.id, true);\r\n            this.element.scrollIntoView({block: \"center\"});\r\n        }\r\n        // Add anchor logic if the element is not user visible.\r\n        if (!cm.uservisible) {\r\n            this.addEventListener(\r\n                this.getElement(this.selectors.CM_NAME),\r\n                'click',\r\n                this._activityAnchor,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `cm[${this.id}]:deleted`, handler: this.remove},\r\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\r\n            {watch: `cm[${this.id}].completionstate:updated`, handler: this._refreshCompletion},\r\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Update a course index cm using the state information.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCm({element}) {\r\n        // Update classes.\r\n        this.element.classList.toggle(this.classes.CMHIDDEN, !element.visible);\r\n        this.getElement(this.selectors.CM_NAME).innerHTML = element.name;\r\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\r\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\r\n        this.element.classList.toggle(this.classes.RESTRICTIONS, element.hascmrestrictions ?? false);\r\n        this.element.classList.toggle(this.classes.INDENTED, element.indent);\r\n        this.locked = element.locked;\r\n    }\r\n\r\n    /**\r\n     * Handle a page item update.\r\n     *\r\n     * @param {Object} details the update details\r\n     * @param {Object} details.element the course state data.\r\n     */\r\n    _refreshPageItem({element}) {\r\n        if (!element.pageItem) {\r\n            return;\r\n        }\r\n        const isPageId = (element.pageItem.type == 'cm' && element.pageItem.id == this.id);\r\n        this.element.classList.toggle(this.classes.PAGEITEM, isPageId);\r\n        if (isPageId && !this.reactive.isEditing) {\r\n            this.element.scrollIntoView({block: \"nearest\"});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the activity completion icon.\r\n     *\r\n     * @param {Object} details the update details\r\n     * @param {Object} details.state the state data\r\n     * @param {Object} details.element the element data\r\n     */\r\n    async _refreshCompletion({state, element}) {\r\n        // No completion icons are displayed in edit mode.\r\n        if (this.reactive.isEditing || !element.istrackeduser) {\r\n            return;\r\n        }\r\n        // Check if the completion value has changed.\r\n        const completionElement = this.getElement(this.selectors.CM_COMPLETION);\r\n        if (completionElement.dataset.value == element.completionstate) {\r\n            return;\r\n        }\r\n\r\n        // Collect section information from the state.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.cmCompletion(state, element);\r\n\r\n        try {\r\n            const {html, js} = await Templates.renderForPromise(completionTemplate, data);\r\n            Templates.replaceNode(completionElement, html, js);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The activity anchor event.\r\n     *\r\n     * @param {Event} event\r\n     */\r\n    _activityAnchor(event) {\r\n        const cm = this.reactive.get('cm', this.id);\r\n        // If the user cannot access the element but the element is present in the page\r\n        // the new url should be an anchor link.\r\n        const element = document.getElementById(cm.anchor);\r\n        if (element) {\r\n            // Marc the element as page item once the event is handled.\r\n            setTimeout(() => {\r\n                this.reactive.dispatch('setPageItem', 'cm', cm.id);\r\n            }, 50);\r\n            return;\r\n        }\r\n        // If the element is not present in the page we need to go to the specific section.\r\n        const course = this.reactive.get('course');\r\n        const section = this.reactive.get('section', cm.sectionid);\r\n        if (!section) {\r\n            return;\r\n        }\r\n        const url = `${course.baseurl}&section=${section.number}#${cm.anchor}`;\r\n        event.preventDefault();\r\n        window.location = url;\r\n    }\r\n}\r\n"],"names":["prefetchTemplate","Component","DndCmItem","create","name","selectors","CM_NAME","CM_COMPLETION","classes","CMHIDDEN","LOCKED","RESTRICTIONS","PAGEITEM","INDENTED","id","this","element","dataset","target","document","getElementById","stateReady","state","configDragDrop","cm","get","course","_refreshCompletion","anchor","URL","window","location","href","hash","replace","url","includes","baseurl","reactive","dispatch","scrollIntoView","block","Config","contextid","courseContextId","contextInstanceId","uservisible","addEventListener","getElement","_activityAnchor","getWatchers","watch","handler","remove","_refreshCm","_refreshPageItem","classList","toggle","visible","innerHTML","DRAGGING","dragging","locked","hascmrestrictions","indent","pageItem","isPageId","type","isEditing","istrackeduser","completionElement","value","completionstate","data","getExporter","cmCompletion","html","js","Templates","renderForPromise","replaceNode","error","event","setTimeout","section","sectionid","number","preventDefault"],"mappings":"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"}