{"version":3,"file":"section.min.js","sources":["../../../src/local/courseindex/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index section component.\r\n *\r\n * This component is used to control specific course section interactions like drag and drop.\r\n *\r\n * @module     core_courseformat/local/courseindex/section\r\n * @class      core_courseformat/local/courseindex/section\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport SectionTitle from 'format_mooin1pager/local/courseindex/sectiontitle';\r\nimport DndSection from 'format_mooin1pager/local/courseeditor/dndsection';\r\nimport { get_string as getString } from \"core/str\";\r\n\r\nexport default class Component extends DndSection {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'courseindex_section';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION_ITEM: `[data-for='section_item']`,\r\n            SECTION_TITLE: `[data-for='section_title']`,\r\n            CM_LAST: `[data-for=\"cm\"]:last-child`,\r\n            INDEXNUMBER: `[data-for='index_number']`,\r\n            CARET: `[data-for='caret']`,\r\n            INDEXINFOS: `[data-for='index_infos']`,\r\n            //CHECKMARK: `[data-for='checkmark']`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            SECTIONHIDDEN: 'dimmed',\r\n            SECTIONCURRENT: 'current',\r\n            LOCKED: 'editinprogress',\r\n            RESTRICTIONS: 'restrictions',\r\n            PAGEITEM: 'pageitem',\r\n        };\r\n\r\n        // We need our id to watch specific events.\r\n        this.id = this.element.dataset.id;\r\n        this.isPageItem = false;\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustahce template.\r\n     *\r\n     * @param {string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors) {\r\n        return new Component({\r\n            element: document.getElementById(target),\r\n            selectors,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the initial state\r\n     */\r\n    stateReady(state) {\r\n        this.configState(state);\r\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n        // Drag and drop is only available for components compatible course formats.\r\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\r\n            // Init the inner dragable element passing the full section as affected region.\r\n            const titleitem = new SectionTitle({\r\n                ...this,\r\n                element: sectionItem,\r\n                fullregion: this.element,\r\n            });\r\n            this.configDragDrop(titleitem);\r\n        }\r\n        // Check if the current url is the section url.\r\n        const section = state.section.get(this.id);\r\n        if (window.location.href == section.sectionurl.replace(/&amp;/g, \"&\")) {\r\n            //this.reactive.dispatch('setPageItem', 'section', this.id);\r\n            //this.reactive.dispatch('setContinueSection', 'section', this.id);\r\n            sectionItem.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `section[${this.id}]:deleted`, handler: this.remove},\r\n            {watch: `section[${this.id}]:updated`, handler: this._refreshSection},\r\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\r\n            {watch: `section[${this.id}].sectionprogress:updated`, handler: this._updateSectionProgress},\r\n            //{watch: `section[${this.id}].isChapter:updated`, handler: this._reloadSectionNames},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Get the last CM element of that section.\r\n     *\r\n     * @returns {element|null}\r\n     */\r\n    getLastCm() {\r\n        return this.getElement(this.selectors.CM_LAST);\r\n    }\r\n\r\n    /**\r\n     * Update a course index section using the state information.\r\n     *\r\n     * @param {Object} param details the update details.\r\n     * @param {Object} param.element the section element\r\n     */\r\n    _refreshSection({state, element}) {\r\n        // Update classes.\r\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n        sectionItem.classList.toggle(this.classes.SECTIONHIDDEN, !element.visible);\r\n        sectionItem.classList.toggle(this.classes.RESTRICTIONS, element.hasrestrictions ?? false);\r\n        this.element.classList.toggle(this.classes.SECTIONCURRENT, element.current);\r\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\r\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\r\n        this.locked = element.locked;\r\n        if (this.reactive.isEditing) {\r\n            this._reloadSectionNames({ element: element });\r\n        }\r\n        \r\n    }\r\n\r\n    async _reloadSectionNames({element}) {\r\n        const title = this.getElement(this.selectors.SECTION_TITLE);\r\n        //window.console.log(element);\r\n        if (element.isChapter) {\r\n            const caret = document.createElement(\"i\");\r\n            caret.classList.add(\"bi\", \"bi-caret-right-fill\");\r\n            title.innerHTML = \" \" + await getString(\"chapter\", \"format_mooin1pager\") + \" \" + element.isChapter + \": \" + element.title;\r\n            title.prepend(caret);\r\n        } if (!element.isChapter) {\r\n            //title.innerHTML = element.parentChapter + \".\" + element.innerChapterNumber + \": \" + element.title;\r\n            title.innerHTML = element.prefix + \": \" + element.title;\r\n        }\r\n      }\r\n\r\n    /**\r\n     * Handle a page item update.\r\n     *\r\n     * @param {Object} details the update details\r\n     * @param {Object} details.state the state data.\r\n     * @param {Object} details.element the course state data.\r\n     */\r\n    _refreshPageItem({element, state}) {\r\n        if (!element.pageItem) {\r\n            return;\r\n        }\r\n        if (element.pageItem.sectionId !== this.id && this.isPageItem) {\r\n            this.pageItem = false;\r\n            this.getElement(this.selectors.SECTION_ITEM).classList.remove(this.classes.PAGEITEM);\r\n            return;\r\n        }\r\n        const section = state.section.get(this.id);\r\n        if (section.indexcollapsed && !element.pageItem?.isStatic) {\r\n            this.pageItem = (element.pageItem?.sectionId == this.id);\r\n        } else {\r\n            this.pageItem = (element.pageItem.type == 'section' && element.pageItem.id == this.id);\r\n        }\r\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n        sectionItem.classList.toggle(this.classes.PAGEITEM, this.pageItem ?? false);\r\n        if (this.pageItem && !this.reactive.isEditing) {\r\n            this.element.scrollIntoView({block: \"nearest\"});\r\n        }\r\n    }\r\n\r\n\r\n    async _updateSectionProgress({ state, element }) {\r\n        if (element.isCompleted) {\r\n            const infos = this.getElement(this.selectors.INDEXINFOS);\r\n            const checkMark = document.createElement(\"i\");\r\n            checkMark.classList.add(\"bi\", \"bi-check\");\r\n            infos.appendChild(checkMark);\r\n        } else {\r\n            //const checkmark = this.getElement(this.selectors.CHECKMARK);\r\n            //checkmark.remove();\r\n        }\r\n        \r\n        \r\n    }\r\n}\r\n"],"names":["Component","DndSection","create","name","selectors","SECTION_ITEM","SECTION_TITLE","CM_LAST","INDEXNUMBER","CARET","INDEXINFOS","classes","SECTIONHIDDEN","SECTIONCURRENT","LOCKED","RESTRICTIONS","PAGEITEM","id","this","element","dataset","isPageItem","target","document","getElementById","stateReady","state","configState","sectionItem","getElement","reactive","isEditing","supportComponents","titleitem","SectionTitle","fullregion","configDragDrop","section","get","window","location","href","sectionurl","replace","scrollIntoView","getWatchers","watch","handler","remove","_refreshSection","_refreshPageItem","_updateSectionProgress","getLastCm","classList","toggle","visible","hasrestrictions","current","DRAGGING","dragging","locked","_reloadSectionNames","title","isChapter","caret","createElement","add","innerHTML","prepend","prefix","pageItem","sectionId","indexcollapsed","_element$pageItem","isStatic","type","block","isCompleted","infos","checkMark","appendChild"],"mappings":"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"}