{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     core_courseformat/local/content\r\n * @class      core_courseformat/local/content\r\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport {debounce} from 'core/utils';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport Config from 'core/config';\r\nimport inplaceeditable from 'core/inplace_editable';\r\nimport Section from 'core_courseformat/local/content/section';\r\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\r\nimport Fragment from 'core/fragment';\r\nimport Templates from 'core/templates';\r\nimport DispatchActions from 'core_courseformat/local/content/actions';\r\nimport * as CourseEvents from 'core_course/events';\r\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\r\nimport jQuery from 'jquery';\r\nimport Pending from 'core/pending';\r\n\r\nexport default class Component extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     *\r\n     * @param {Object} descriptor the component descriptor\r\n     */\r\n    create(descriptor) {\r\n        // Optional component name for debugging.\r\n        this.name = 'course_format';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION: `[data-for='section']`,\r\n            SECTION_ITEM: `[data-for='section_title']`,\r\n            SECTION_CMLIST: `[data-for='cmlist']`,\r\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\r\n            CM: `[data-for='cmitem']`,\r\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\r\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\r\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\r\n            // Formats can override the activity tag but a default one is needed to create new elements.\r\n            ACTIVITYTAG: 'li',\r\n            SECTIONTAG: 'li',\r\n        };\r\n        this.selectorGenerators = {\r\n            cmNameFor: (id) => `[data-cm-name-for='${id}']`,\r\n            sectionNameFor: (id) => `[data-section-name-for='${id}']`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            COLLAPSED: `collapsed`,\r\n            // Course content classes.\r\n            ACTIVITY: `activity`,\r\n            STATEDREADY: `stateready`,\r\n            SECTION: `section`,\r\n        };\r\n        // Array to save dettached elements during element resorting.\r\n        this.dettachedCms = {};\r\n        this.dettachedSections = {};\r\n        // Index of sections and cms components.\r\n        this.sections = {};\r\n        this.cms = {};\r\n        // The page section return.\r\n        this.sectionReturn = descriptor.sectionReturn ?? null;\r\n        this.debouncedReloads = new Map();\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustahce template.\r\n     *\r\n     * @param {string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @param {number} sectionReturn the content section return\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors, sectionReturn) {\r\n        return new Component({\r\n            element: document.getElementById(target),\r\n            reactive: getCurrentCourseEditor(),\r\n            selectors,\r\n            sectionReturn,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the state data\r\n     */\r\n    stateReady(state) {\r\n        this._indexContents();\r\n        // Activate section togglers.\r\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\r\n\r\n        // Collapse/Expand all sections button.\r\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\r\n        if (toogleAll) {\r\n\r\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\r\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\r\n            const collapseElementIds = [...collapseElements].map(element => element.id);\r\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\r\n\r\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\r\n            this.addEventListener(toogleAll, 'keydown', e => {\r\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\r\n                if (e.key === ' ') {\r\n                    this._allSectionToggler(e);\r\n                }\r\n            });\r\n            this._refreshAllSectionsToggler(state);\r\n        }\r\n\r\n        if (this.reactive.supportComponents) {\r\n            // Actions are only available in edit mode.\r\n            if (this.reactive.isEditing) {\r\n                new DispatchActions(this);\r\n            }\r\n\r\n            // Mark content as state ready.\r\n            this.element.classList.add(this.classes.STATEDREADY);\r\n        }\r\n\r\n        // Capture completion events.\r\n        this.addEventListener(\r\n            this.element,\r\n            CourseEvents.manualCompletionToggled,\r\n            this._completionHandler\r\n        );\r\n\r\n        // Capture page scroll to update page item.\r\n        this.addEventListener(\r\n            document,\r\n            \"scroll\",\r\n            this._scrollHandler\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Setup sections toggler.\r\n     *\r\n     * Toggler click is delegated to the main course content element because new sections can\r\n     * appear at any moment and this way we prevent accidental double bindings.\r\n     *\r\n     * @param {Event} event the triggered event\r\n     */\r\n    _sectionTogglers(event) {\r\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\r\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\r\n        // Assume that chevron is the only collapse toggler in a section heading;\r\n        // I think this is the most efficient way to verify at the moment.\r\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\r\n\r\n        if (sectionlink || isChevron) {\r\n\r\n            const section = event.target.closest(this.selectors.SECTION);\r\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\r\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n            const sectionId = section.getAttribute('data-id');\r\n            this.reactive.dispatch(\r\n                'sectionContentCollapsed',\r\n                [sectionId],\r\n                !isCollapsed,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the collapse/expand all sections button.\r\n     *\r\n     * Toggler click is delegated to the main course content element because new sections can\r\n     * appear at any moment and this way we prevent accidental double bindings.\r\n     *\r\n     * @param {Event} event the triggered event\r\n     */\r\n    _allSectionToggler(event) {\r\n        event.preventDefault();\r\n\r\n        const target = event.target.closest(this.selectors.TOGGLEALL);\r\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\r\n\r\n        const course = this.reactive.get('course');\r\n        this.reactive.dispatch(\r\n            'sectionContentCollapsed',\r\n            course.sectionlist ?? [],\r\n            !isAllCollapsed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        // Section return is a global page variable but most formats define it just before start printing\r\n        // the course content. This is the reason why we define this page setting here.\r\n        this.reactive.sectionReturn = this.sectionReturn;\r\n\r\n        // Check if the course format is compatible with reactive components.\r\n        if (!this.reactive.supportComponents) {\r\n            return [];\r\n        }\r\n        return [\r\n            // State changes that require to reload some course modules.\r\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\r\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\r\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\r\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\r\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\r\n            {watch: `cm.name:updated`, handler: this._refreshCmName},\r\n            // Update section number and title.\r\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\r\n            {watch: `section.title:updated`, handler: this._refreshSectionTitle},\r\n            // Collapse and expand sections.\r\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\r\n            // Sections and cm sorting.\r\n            {watch: `transaction:start`, handler: this._startProcessing},\r\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\r\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\r\n            // Section visibility.\r\n            {watch: `section.visible:updated`, handler: this._reloadSection},\r\n            // Reindex sections and cms.\r\n            {watch: `state:updated`, handler: this._indexContents},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Update a course module name on the whole page.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCmName({element}) {\r\n        // Update classes.\r\n        // Replace the text content of the cm name.\r\n        const allCmNamesFor = this.getElements(\r\n            this.selectorGenerators.cmNameFor(element.id)\r\n        );\r\n        allCmNamesFor.forEach((cmNameFor) => {\r\n            cmNameFor.textContent = element.name;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update section collapsed state via bootstrap 4 if necessary.\r\n     *\r\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\r\n     * toggling working.\r\n     *\r\n     * @param {object} args\r\n     * @param {Object} args.state The state data\r\n     * @param {Object} args.element The element to update\r\n     */\r\n    _refreshSectionCollapsed({state, element}) {\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            throw new Error(`Unknown section with ID ${element.id}`);\r\n        }\r\n        // Check if it is already done.\r\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\r\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n        if (element.contentcollapsed !== isCollapsed) {\r\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\r\n            if (!collapsibleId) {\r\n                return;\r\n            }\r\n            collapsibleId = collapsibleId.replace('#', '');\r\n            const collapsible = document.getElementById(collapsibleId);\r\n            if (!collapsible) {\r\n                return;\r\n            }\r\n\r\n            // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\r\n            // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\r\n            // it does not require jQuery anymore (when MDL-71979 is integrated).\r\n            jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\r\n        }\r\n\r\n        this._refreshAllSectionsToggler(state);\r\n    }\r\n\r\n    /**\r\n     * Refresh the collapse/expand all sections element.\r\n     *\r\n     * @param {Object} state The state data\r\n     */\r\n    _refreshAllSectionsToggler(state) {\r\n        const target = this.getElement(this.selectors.TOGGLEALL);\r\n        if (!target) {\r\n            return;\r\n        }\r\n        // Check if we have all sections collapsed/expanded.\r\n        let allcollapsed = true;\r\n        let allexpanded = true;\r\n        state.section.forEach(\r\n            section => {\r\n                allcollapsed = allcollapsed && section.contentcollapsed;\r\n                allexpanded = allexpanded && !section.contentcollapsed;\r\n            }\r\n        );\r\n        if (allcollapsed) {\r\n            target.classList.add(this.classes.COLLAPSED);\r\n            target.setAttribute('aria-expanded', false);\r\n        }\r\n        if (allexpanded) {\r\n            target.classList.remove(this.classes.COLLAPSED);\r\n            target.setAttribute('aria-expanded', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the component to start a transaction.\r\n     *\r\n     * Some of the course actions replaces the current DOM element with a new one before updating the\r\n     * course state. This means the component cannot preload any index properly until the transaction starts.\r\n     *\r\n     */\r\n    _startProcessing() {\r\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\r\n        // need to store somewhare in case they are needed later.\r\n        this.dettachedCms = {};\r\n        this.dettachedSections = {};\r\n    }\r\n\r\n    /**\r\n     * Activity manual completion listener.\r\n     *\r\n     * @param {Event} event the custom ecent\r\n     */\r\n    _completionHandler({detail}) {\r\n        if (detail === undefined) {\r\n            return;\r\n        }\r\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\r\n    }\r\n\r\n    /**\r\n     * Check the current page scroll and update the active element if necessary.\r\n     */\r\n    _scrollHandler() {\r\n        const pageOffset = window.scrollY;\r\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\r\n        // Check what is the active element now.\r\n        let pageItem = null;\r\n        items.every(item => {\r\n            const index = (item.type === 'section') ? this.sections : this.cms;\r\n            if (index[item.id] === undefined) {\r\n                return true;\r\n            }\r\n    \r\n            const element = index[item.id].element;\r\n            pageItem = item;\r\n    \r\n            const absoluteOffset = getAbsoluteOffset(element);\r\n            const absoluteTop = absoluteOffset.top;\r\n    \r\n            return pageOffset >= absoluteTop;\r\n        });\r\n        if (pageItem) {\r\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a course section when the section number changes.\r\n     *\r\n     * The courseActions module used for most course section tools still depends on css classes and\r\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\r\n     * the\r\n     *\r\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\r\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionNumber({element}) {\r\n        // Find the element.\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            // Job done. Nothing to refresh.\r\n            return;\r\n        }\r\n        // Update section numbers in all data, css and YUI attributes.\r\n        target.id = `section-${element.number}`;\r\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\r\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\r\n        // use it for legacy purposes.\r\n        target.dataset.sectionid = element.number;\r\n        // The data-number is the attribute used by components to store the section number.\r\n        target.dataset.number = element.number;\r\n\r\n        // Update title and title inplace editable, if any.\r\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\r\n        if (inplace) {\r\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\r\n            // to make sure the inplace editable still represents the same itemid.\r\n            const currentvalue = inplace.getValue();\r\n            const currentitemid = inplace.getItemId();\r\n            // Unnamed sections must be recalculated.\r\n            if (inplace.getValue() === '') {\r\n                // The value to send can be an empty value if it is a default name.\r\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\r\n                    inplace.setValue(element.rawtitle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a course section name on the whole page.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionTitle({element}) {\r\n        // Replace the text content of the section name in the whole page.\r\n        const allSectionNamesFor = document.querySelectorAll(\r\n            this.selectorGenerators.sectionNameFor(element.id)\r\n        );\r\n        allSectionNamesFor.forEach((sectionNameFor) => {\r\n            sectionNameFor.textContent = element.title;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh a section cm list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionCmlist({element}) {\r\n        const cmlist = element.cmlist ?? [];\r\n        const section = this.getElement(this.selectors.SECTION, element.id);\r\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\r\n        // A method to create a fake element to be replaced when the item is ready.\r\n        const createCm = this._createCmItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the section list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.state the full state object.\r\n     */\r\n    _refreshCourseSectionlist({state}) {\r\n        // If we have a section return means we only show a single section so no need to fix order.\r\n        if (this.reactive.sectionReturn !== null) {\r\n            return;\r\n        }\r\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\r\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\r\n        // For now section cannot be created at a frontend level.\r\n        const createSection = this._createSectionItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\r\n        }\r\n\r\n        //refresh page\r\n        setTimeout(() => {\r\n            window.location.reload();\r\n        }, 200); \r\n\r\n    }\r\n\r\n    /**\r\n     * Regenerate content indexes.\r\n     *\r\n     * This method is used when a legacy action refresh some content element.\r\n     */\r\n    _indexContents() {\r\n        // Find unindexed sections.\r\n        this._scanIndex(\r\n            this.selectors.SECTION,\r\n            this.sections,\r\n            (item) => {\r\n                return new Section(item);\r\n            }\r\n        );\r\n\r\n        // Find unindexed cms.\r\n        this._scanIndex(\r\n            this.selectors.CM,\r\n            this.cms,\r\n            (item) => {\r\n                return new CmItem(item);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reindex a content (section or cm) of the course content.\r\n     *\r\n     * This method is used internally by _indexContents.\r\n     *\r\n     * @param {string} selector the DOM selector to scan\r\n     * @param {*} index the index attribute to update\r\n     * @param {*} creationhandler method to create a new indexed element\r\n     */\r\n    _scanIndex(selector, index, creationhandler) {\r\n        const items = this.getElements(`${selector}:not([data-indexed])`);\r\n        items.forEach((item) => {\r\n            if (!item?.dataset?.id) {\r\n                return;\r\n            }\r\n            // Delete previous item component.\r\n            if (index[item.dataset.id] !== undefined) {\r\n                index[item.dataset.id].unregister();\r\n            }\r\n            // Create the new component.\r\n            index[item.dataset.id] = creationhandler({\r\n                ...this,\r\n                element: item,\r\n            });\r\n            // Mark as indexed.\r\n            item.dataset.indexed = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reload a course module contents.\r\n     *\r\n     * Most course module HTML is still strongly backend dependant.\r\n     * Some changes require to get a new version of the module.\r\n     *\r\n     * @param {object} param0 the watcher details\r\n     * @param {object} param0.element the state object\r\n     */\r\n    _reloadCm({element}) {\r\n        if (!this.getElement(this.selectors.CM, element.id)) {\r\n            return;\r\n        }\r\n        const debouncedReload = this._getDebouncedReloadCm(element.id);\r\n        debouncedReload();\r\n    }\r\n\r\n    /**\r\n     * Generate or get a reload CM debounced function.\r\n     * @param {Number} cmId\r\n     * @returns {Function} the debounced reload function\r\n     */\r\n    _getDebouncedReloadCm(cmId) {\r\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\r\n        let debouncedReload = this.debouncedReloads.get(pendingKey);\r\n        if (debouncedReload) {\r\n            return debouncedReload;\r\n        }\r\n        const reload = () => {\r\n            const pendingReload = new Pending(pendingKey);\r\n            this.debouncedReloads.delete(pendingKey);\r\n            const cmitem = this.getElement(this.selectors.CM, cmId);\r\n            if (!cmitem) {\r\n                return pendingReload.resolve();\r\n            }\r\n            const promise = Fragment.loadFragment(\r\n                'core_courseformat',\r\n                'cmitem',\r\n                Config.courseContextId,\r\n                {\r\n                    id: cmId,\r\n                    courseid: Config.courseId,\r\n                    sr: this.reactive.sectionReturn ?? null,\r\n                }\r\n            );\r\n            promise.then((html, js) => {\r\n                // Other state change can reload the CM or the section before this one.\r\n                if (!document.contains(cmitem)) {\r\n                    pendingReload.resolve();\r\n                    return false;\r\n                }\r\n                Templates.replaceNode(cmitem, html, js);\r\n                this._indexContents();\r\n                pendingReload.resolve();\r\n                return true;\r\n            }).catch(() => {\r\n                pendingReload.resolve();\r\n            });\r\n            return pendingReload;\r\n        };\r\n        debouncedReload = debounce(\r\n            reload,\r\n            200,\r\n            {\r\n                cancel: true, pending: true\r\n            }\r\n        );\r\n        this.debouncedReloads.set(pendingKey, debouncedReload);\r\n        return debouncedReload;\r\n    }\r\n\r\n    /**\r\n     * Cancel the active reload CM debounced function, if any.\r\n     * @param {Number} cmId\r\n     */\r\n    _cancelDebouncedReloadCm(cmId) {\r\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\r\n        const debouncedReload = this.debouncedReloads.get(pendingKey);\r\n        if (!debouncedReload) {\r\n            return;\r\n        }\r\n        debouncedReload.cancel();\r\n        this.debouncedReloads.delete(pendingKey);\r\n    }\r\n\r\n    /**\r\n     * Reload a course section contents.\r\n     *\r\n     * Section HTML is still strongly backend dependant.\r\n     * Some changes require to get a new version of the section.\r\n     *\r\n     * @param {details} param0 the watcher details\r\n     * @param {object} param0.element the state object\r\n     */\r\n    _reloadSection({element}) {\r\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\r\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\r\n        if (sectionitem) {\r\n            // Cancel any pending reload because the section will reload cms too.\r\n            for (const cmId of element.cmlist) {\r\n                this._cancelDebouncedReloadCm(cmId);\r\n            }\r\n            const promise = Fragment.loadFragment(\r\n                'core_courseformat',\r\n                'section',\r\n                Config.courseContextId,\r\n                {\r\n                    id: element.id,\r\n                    courseid: Config.courseId,\r\n                    sr: this.reactive.sectionReturn ?? null,\r\n                }\r\n            );\r\n            promise.then((html, js) => {\r\n                Templates.replaceNode(sectionitem, html, js);\r\n                this._indexContents();\r\n                pendingReload.resolve();\r\n            }).catch(() => {\r\n                pendingReload.resolve();\r\n            });\r\n        }\r\n    }\r\n\r\n        /**\r\n     * Create a new course module item in a section.\r\n     *\r\n     * Thos method will append a fake item in the container and trigger an ajax request to\r\n     * replace the fake element by the real content.\r\n     *\r\n     * @param {Element} container the container element (section)\r\n     * @param {Number} cmid the course-module ID\r\n     * @returns {Element} the created element\r\n     */\r\n        _createCmItem(container, cmid) {\r\n          const newItem = document.createElement(this.selectors.ACTIVITYTAG);\r\n          newItem.dataset.for = 'cmitem';\r\n          newItem.dataset.id = cmid;\r\n          // The legacy actions.js requires a specific ID and class to refresh the CM.\r\n          newItem.id = `module-${cmid}`;\r\n          newItem.classList.add(this.classes.ACTIVITY);\r\n          container.append(newItem);\r\n          this._reloadCm({\r\n              element: this.reactive.get('cm', cmid),\r\n          });\r\n          return newItem;\r\n      }\r\n  \r\n      /**\r\n       * Create a new section item.\r\n       *\r\n       * This method will append a fake item in the container and trigger an ajax request to\r\n       * replace the fake element by the real content.\r\n       *\r\n       * @param {Element} container the container element (section)\r\n       * @param {Number} sectionid the course-module ID\r\n       * @returns {Element} the created element\r\n       */\r\n      _createSectionItem(container, sectionid) {\r\n          const section = this.reactive.get('section', sectionid);\r\n          const newItem = document.createElement(this.selectors.SECTIONTAG);\r\n          newItem.dataset.for = 'section';\r\n          newItem.dataset.id = sectionid;\r\n          newItem.dataset.number = section.number;\r\n          // The legacy actions.js requires a specific ID and class to refresh the section.\r\n          newItem.id = `section-${sectionid}`;\r\n          newItem.classList.add(this.classes.SECTION);\r\n          container.append(newItem);\r\n          this._reloadSection({\r\n              element: section,\r\n          });\r\n          return newItem;\r\n      }\r\n  \r\n      /**\r\n       * Fix/reorder the section or cms order.\r\n       *\r\n       * @param {Element} container the HTML element to reorder.\r\n       * @param {Array} neworder an array with the ids order\r\n       * @param {string} selector the element selector\r\n       * @param {Object} dettachedelements a list of dettached elements\r\n       * @param {function} createMethod method to create missing elements\r\n       */\r\n      async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\r\n          if (container === undefined) {\r\n              return;\r\n          }\r\n  \r\n          // Empty lists should not be visible.\r\n          if (!neworder.length) {\r\n              container.classList.add('hidden');\r\n              container.innerHTML = '';\r\n              return;\r\n          }\r\n  \r\n          // Grant the list is visible (in case it was empty).\r\n          container.classList.remove('hidden');\r\n  \r\n          // Move the elements in order at the beginning of the list.\r\n          neworder.forEach((itemid, index) => {\r\n              let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\r\n              if (item === undefined) {\r\n                  // Missing elements cannot be sorted.\r\n                  return;\r\n              }\r\n              // Get the current elemnt at that position.\r\n              const currentitem = container.children[index];\r\n              if (currentitem === undefined) {\r\n                  container.append(item);\r\n                  return;\r\n              }\r\n              if (currentitem !== item) {\r\n                  container.insertBefore(item, currentitem);\r\n              }\r\n          });\r\n  \r\n          // Remove the remaining elements.\r\n          const orphanElements = [];\r\n          while (container.children.length > neworder.length) {\r\n              const lastchild = container.lastChild;\r\n              // Any orphan element is always displayed after the listed elements.\r\n              // Also, some third-party plugins can use a fake dndupload-preview indicator.\r\n              if (lastchild?.classList?.contains('dndupload-preview') || lastchild.dataset?.orphan) {\r\n                  orphanElements.push(lastchild);\r\n              } else {\r\n                  dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\r\n              }\r\n              container.removeChild(lastchild);\r\n          }\r\n          // Restore orphan elements.\r\n          orphanElements.forEach((element) => {\r\n              container.append(element);\r\n          });\r\n      }\r\n  }\r\n  \r\n//helperfunction to get absolute offset of elements\r\nfunction getAbsoluteOffset(element) {\r\n    let top = 0;\r\n    let left = 0;\r\n    let currentElement = element;\r\n\r\n    while (currentElement) {\r\n        top += currentElement.offsetTop;\r\n        left += currentElement.offsetLeft;\r\n        currentElement = currentElement.offsetParent;\r\n    }\r\n\r\n    return { top, left };\r\n}"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","selectorGenerators","cmNameFor","id","sectionNameFor","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","target","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","querySelector","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshCmName","_refreshSectionNumber","_refreshSectionTitle","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","forEach","textContent","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","collapse","allcollapsed","allexpanded","remove","detail","undefined","cmid","completed","pageOffset","window","scrollY","items","getExporter","allItemsArray","pageItem","every","item","index","type","absoluteOffset","top","left","currentElement","offsetTop","offsetLeft","offsetParent","getAbsoluteOffset","absoluteTop","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","querySelectorAll","title","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","listedSectionIds","createSection","_createSectionItem","setTimeout","location","reload","_scanIndex","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","pendingReload","Pending","delete","cmitem","resolve","Fragment","loadFragment","Config","courseContextId","courseid","courseId","sr","then","html","js","replaceNode","catch","cancel","pending","set","_cancelDebouncedReloadCm","sectionitem","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","itemid","currentitem","children","insertBefore","orphanElements","lastchild","lastChild","_lastchild$dataset","orphan","push","_lastchild$dataset2","removeChild"],"mappings":"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"}